import sys,operator,timeit,os,time,DisplayFrame
siftvectorThreshold=3

def findNoOfLayers(inputFile):
    f=open(inputFile,"r")
    f.readline()
    l=1
    while(1):
        line=f.readline()
        if not line.startswith("0,"):
            l+=1
        else:
            f.close()
            return l

def concat(a,b):
    return str(a)+"_"+str(b)

def returnTheSameValue(a):
        return a

def convertToInt(a):
    return int(a)

def convertToFloat(a):
    return float(a)

def parseEachLine(line):
    line=line[:len(line)-1]
    commaTokens=line.split(",")#LayerNo,BucketK<i;j;l;x;y>
    bucketID=concat(commaTokens[0],commaTokens[1])#str(commaTokens[0])+"_"+str(commaTokens[1])#bucketID=layerNo_BucketK
    value=commaTokens[2][1:len(commaTokens[2])-1]#<>
    valueTokens=value.split(";")
    i=(valueTokens[0])#video no.
    j=(valueTokens[1])#frame no.
    l=int(valueTokens[2])#cell no.
    x=float(valueTokens[3])
    y=float(valueTokens[4])
    return (bucketID,i,j,l,x,y)

def parseLSHInputFile(inputFile,videoNo,frameNo,xLow,yLow,xHigh,yHigh,L):
    noOfLayers=L
    f=open(inputFile,"r")
    usefulBuckets={}
    lshDS={}
    lines=f.readlines()
    linePtr=0
    noOfLines=len(lines)
    while(linePtr<noOfLines):
        line=lines[linePtr]
        (bucketID,i,j,l,x,y)=parseEachLine(line)
        if i==videoNo and j==frameNo and (x>=xLow and x<=xHigh) and (y>=yLow and y<=yHigh):
            vectorInRectangleGiven=[]
            vectorInRectangleGiven.append(bucketID)
            for v in range(linePtr+1,linePtr+noOfLayers):
                #print (lines[v])
                (bucketID,i,j,l,x,y)=parseEachLine(lines[v])
                vectorInRectangleGiven.append(bucketID)
            usefulBuckets[int(linePtr/noOfLayers)]=vectorInRectangleGiven
            linePtr+=noOfLayers
            continue
        if i==videoNo:
            linePtr+=1
            continue
        if lshDS.get(bucketID)==None:
            lshDS[bucketID]={}
        videoFrameConcat=i+"_"+j#concat(i,j)
        if lshDS[bucketID].get(videoFrameConcat)==None:
            lshDS[bucketID][videoFrameConcat]=[]
        lshDS[bucketID][videoFrameConcat].append(int(linePtr/noOfLayers))
        linePtr+=1
    f.close()
    return (usefulBuckets,lshDS)

def findBestFrames(lshDS,usefulBuckets):
    similarFramesDict={}
    totalVectorsConsidered=0
    uniqueVectorsConsidered=0
    sizeInBytes=0
    for eachVector in usefulBuckets.keys():
        listOfBuckets=usefulBuckets[eachVector]
        uniqueVectorList=[]
        framesConsideredAlready={}
        for eachBucket in listOfBuckets:
            if lshDS.get(eachBucket)==None:
                continue
            framesInTheBucket=lshDS[eachBucket].keys()
            sizeInBytes+=sys.getsizeof(framesInTheBucket)
            for eachFrame in framesInTheBucket:
                if framesConsideredAlready.get(eachFrame)==None:
                    if similarFramesDict.get(eachFrame)==None:
                        similarFramesDict[eachFrame]=0
                    framesConsideredAlready[eachFrame]=1
                    similarFramesDict[eachFrame]+=1
                totalVectorsConsidered+=len(lshDS[eachBucket][eachFrame])
                sizeInBytes+=sys.getsizeof(lshDS[eachBucket][eachFrame])
                for vr in lshDS[eachBucket][eachFrame]:
                    uniqueVectorList.append(vr)
        uniqueVectorList=set(uniqueVectorList)
        uniqueVectorsConsidered+=len(uniqueVectorList)
    return (similarFramesDict,totalVectorsConsidered,uniqueVectorsConsidered,sizeInBytes)

def filterNBestFrames(similarFramesDict,n):
    sorted_frameList = sorted(similarFramesDict.items(), key=operator.itemgetter(1))
    sorted_frameList.reverse()
    sorted_frameList=sorted_frameList[:n]
    videoFrameTupleList=[]
    for each in sorted_frameList:
        tokens=each[0].split("_")
        videoNumber=int(tokens[0])
        frameNumber=int(tokens[1])
        videoFrameTupleList.append((videoNumber,frameNumber))
    return videoFrameTupleList

def getVideoNames(path):
    videos=os.listdir(path)
    for i in range(0,len(videos)):
        videos[i]=os.path.join(path,videos[i])
    return videos

def main():
    cla=sys.argv
    if len(cla)!=10:
        print ("Usage:\t python task5.py InputFile n i j x1 y1 x2 y2 Demo_Videos_Directory \n\nWhere \n\t - InputFile is the path to one of the output files generated by Task 5 \
         \n\t - 'n' represents the no. of frames containing similar objects \
         \n\t - i and j represent the query video and frame no. (Videos in the directory will be of the form \'i.mp4\') \
         \n\t - (x1,y1) form the coordinates of one of the vertices of the rectangle containing the object to be queried in the given video and frame  \
         \n\t - (x2,y2) form thecoordinates of the vertex that is diagonally opposite to (x1,y1) \
         \n\t - Demo_Videos_Directory is the path to the directory (without spaces) containing the given Demo Videos")
        return
    cla=cla[1:]
    (inputFile,n,videoNo,frameNo,x1,y1,x2,y2,videoDirPath)=map(returnTheSameValue,cla)
    L=findNoOfLayers(inputFile)
    n=int(n)
    (x1,x2,y1,y2)=map(convertToFloat,[x1,x2,y1,y2])
    (xLow,xHigh)=(x1,x2)
    if x2<x1:
        (xLow,xHigh)=(xHigh,xLow)
    (yLow,yHigh)=(y1,y2)
    if y2<y1:
        (yLow,yHigh)=(yHigh,yLow)
    videosIntheDemoFolder=os.listdir(videoDirPath)
    tempVideoNo=videosIntheDemoFolder.index(videoNo+".mp4")+1
    videoNo=str(tempVideoNo)
    #print ("Video Queried is:",videosIntheDemoFolder[int(videoNo)-1])
    (usefulBuckets,lshDS)=parseLSHInputFile(inputFile,videoNo,frameNo,xLow,yLow,xHigh,yHigh,L)
    (similarFrames,totalVectorsConsidered,uniqueVectorsConsidered,sizeInBytes)=findBestFrames(lshDS,usefulBuckets)
    print ("No. of SIFT Vectors considered",uniqueVectorsConsidered)
    print ("Overall No. of SIFT Vectors Considered",totalVectorsConsidered)
    print ("No. of bytes of data from Index to process query",sizeInBytes)
    """count=0
    for each in similarFrames.keys():
        if similarFrames[each]==len(usefulBuckets.keys()):
            print (each,similarFrames[each])
            count+=1
    print (count,len(usefulBuckets))"""
    videoPathsList=getVideoNames(videoDirPath)
    NmostSimilarFrames=filterNBestFrames(similarFrames,n)
    #print (NmostSimilarFrames)
    resultArr=[]
    for each in NmostSimilarFrames:
        resultArr.append((videosIntheDemoFolder[each[0]-1],each[1]))
        try:
            DisplayFrame.displayFrame(videoPathsList[each[0]-1],each[1])
        except:
            #print (videoPathsList[each[0]-1],each[1])
            None
    print ("Video No., Frame No.")
    for frame in resultArr:
        print (frame)
    return

if __name__ == '__main__':
    startM=timeit.default_timer()
    main()
    endM=timeit.default_timer()
    print ("Time Taken for execution:"+str(endM-startM)+" seconds")
